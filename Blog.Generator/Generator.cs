using Markdig;
using Markdig.Extensions.Yaml;
using Markdig.Syntax;
using Markdig.Syntax.Inlines;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using VYaml.Annotations;
using VYaml.Serialization;

namespace Blog.Generator;

[Generator(LanguageNames.CSharp)]
public partial class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var mdFilesSource = context.AdditionalTextsProvider
            .Where(t => t.Path.EndsWith(".md"))
            .Select((t, token) => new Post(t.Path, t.GetText(token)))
            .Collect();

        context.RegisterSourceOutput(mdFilesSource, Emit);
    }

    private void Emit(SourceProductionContext context, ImmutableArray<Post> source)
    {
        var posts = new Dictionary<string, List<Post>>();
        foreach(var mdFile in source.Where(m => !m.FileName.Equals("Profile")))
        {
            if (mdFile.FileName.Length == 8 && int.TryParse(mdFile.FileName, out var _))
            {
                var key = mdFile.FileName.AsSpan().Slice(0, 4).ToString();
                if (posts.TryGetValue(key, out var result))
                {
                    result.Add(mdFile);
                }
                else
                {
                    var mdFiles = new List<Post>();
                    mdFiles.Add(mdFile);
                    posts[key] = mdFiles;
                }
            }
        }

        var allPostEmitter = new StringBuilder();
        allPostEmitter.AppendLine("    public static readonly ImmutableArray<ImmutableArray<Post>> AllPost = [");
        foreach(var key in posts.Keys.OrderByDescending(k => k))
        {
            allPostEmitter.AppendLine($"        _{key},");
        }
        allPostEmitter.AppendLine("    ];");


        var postListEmitter = new StringBuilder();
        foreach (var p in posts.OrderByDescending(p => p.Key))
        {
            var postList = new StringBuilder();
            postList.AppendLine($"    public static readonly ImmutableArray<Post> _{p.Key} = [");
            foreach (var post in p.Value.OrderByDescending(m => m.FileName))
            {
                if (post.SourceText is null)
                {
                    continue;
                }

                var title = post.Header.Title?.Replace("\"", "\\\"").Replace("\r", "").Replace("\n", " ");
                var headText = post.HeadText?.Replace("\"", "\\\"").Replace("\r", "").Replace("\n", " ");
                postList.AppendLine($"        new Post() {{ Url = \"{post.FileName}\", Date = \"{post.DisplayPostDate}\", Title = \"{title}\", HeadText = \"{headText}\" }},");
            }
            postList.AppendLine("    ];");
            postListEmitter.AppendLine(postList.ToString());
        }

        var code = $$"""
// <auto-generated> This .cs file is generated by CsToml.Generator. </auto-generated>
#nullable enable
#pragma warning disable CS0219 // The variable 'variable' is assigned but its value is never used
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8603 // Possible null reference return.
#pragma warning disable CS8604 // Possible null reference argument for parameter.
#pragma warning disable CS8619 // Possible null reference assignment fix

using System.Collections.Immutable;
using System.Runtime.InteropServices;

namespace Blog;

public static class PostProvider
{
{{postListEmitter}}

{{allPostEmitter}}
}

[StructLayout(LayoutKind.Auto)]
public record struct Post
{
    public required string? Url { get; init; }

    public required string? Date { get; init; }

    public required string? Title { get; init; }

    public required string? HeadText { get; init; }
}
""";

        context.AddSource($"PostProvider_generated.g.cs", code);
    }
}

public sealed record Post
{
    private static readonly MarkdownPipeline markdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseYamlFrontMatter()
        .Build();

    public string Path { get; init; }

    public SourceText? SourceText { get; init; }

    public string FileName => System.IO.Path.GetFileNameWithoutExtension(Path);

    public Header Header { get; init; }

    public string HeadText { get; init; }

    public string DisplayPostDate
    {
        get
        {
            if (DateTime.TryParseExact(FileName, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out var date))
            {
                return date.ToString("yyyy-MM-dd");
            }
            return FileName;
        }
    }

    public Post(string path, SourceText? sourceText)
    {
        Path = path;
        SourceText = sourceText;

        var markdown = SourceText?.ToString() ?? string.Empty;
        var document = Markdown.Parse(markdown, markdownPipeline);
        var yamlBlock = document.Descendants<YamlFrontMatterBlock>().FirstOrDefault();
        var yaml = markdown.Substring(yamlBlock.Span.Start, yamlBlock.Span.Length);

        Header = YamlSerializer.Deserialize<Header>(Encoding.UTF8.GetBytes(yaml));

        // Extract the first 60 characters of the text content from the markdown document.
        var headTextEmiiter = new StringBuilder();
        foreach (var block in document)
        {
            if (block is ParagraphBlock paragraphBlock && paragraphBlock.Inline != null)
            {
                foreach(var inline in paragraphBlock.Inline.Where(i => i is LiteralInline))
                {
                    headTextEmiiter.Append(inline.ToString());
                }
            }
        }
        HeadText = headTextEmiiter.Length > 60 ? $"{headTextEmiiter.ToString().Substring(0, 60)}..." : headTextEmiiter.ToString();
    }
}

[YamlObject]
public partial record Header
{
    public string? Title { get; init; }

    public string? Url { get; init; }

    public string? Namespace { get; init; }

}
