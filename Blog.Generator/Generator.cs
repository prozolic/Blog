using Markdig;
using Markdig.Extensions.Yaml;
using Markdig.Syntax;
using Markdig.Syntax.Inlines;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Text;
using VYaml.Annotations;
using VYaml.Serialization;

namespace Blog.Generator;

[Generator(LanguageNames.CSharp)]
public partial class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var mdFilesSource = context.AdditionalTextsProvider
            .Where(t => t.Path.EndsWith(".md"))
            .Select((t, token) => new Post(t.Path, t.GetText(token)))
            .Collect();

        context.RegisterSourceOutput(mdFilesSource, Emit);
    }

    private void Emit(SourceProductionContext context, ImmutableArray<Post> source)
    {
        const int MarkdownFileNameLength = 10;

        var posts = new Dictionary<string, List<Post>>();
        var postCount = 0;
        foreach(var mdFile in source.Where(m => m.FileName.Length == MarkdownFileNameLength && DateTime.TryParse(m.FileName, out var _)))
        {
            var key = mdFile.FileName.AsSpan().Slice(0, 4).ToString();
            if (posts.TryGetValue(key, out var result))
            {
                postCount++;
                result.Add(mdFile);
            }
            else
            {
                posts[key] = [mdFile];
            }
        }

        // Sort so that index 0 is the latest post and store in AllPosts.
        var allPostsEmitter = new StringBuilder();
        allPostsEmitter.AppendLine("    public static readonly ImmutableArray<Post> AllPosts = [");
        foreach (var p in posts.OrderByDescending(p => p.Key))
        {
            foreach (var post in p.Value.Where(m => m.SourceText != null).OrderByDescending(m => m.FileName))
            {
                var title = post.Header.Title?.Replace("\"", "\\\"").Replace("\r", "").Replace("\n", " ");
                var headText = post.HeadText?.Replace("\"", "\\\"").Replace("\r", "").Replace("\n", " ");
                var postItem = $"        new Post() {{ Url = \"{post.Header.RefUrl}\", Date = \"{post.FileName}\", Title = \"{title}\", HeadText = \"{headText}\", Categories = {post.Header.FormatCategoriesInArrayType()} }},";
                allPostsEmitter.AppendLine(postItem);
            }
        }
        allPostsEmitter.Append("    ];");

        var postListEmitter = new StringBuilder();
        var index = 0;
        foreach (var p in posts.OrderByDescending(p => p.Key))
        {
            postListEmitter.AppendLine($"    public static readonly ImmutableArray<Post> _{p.Key} = [");
            foreach (var post in p.Value.Where(m => m.SourceText != null))
            {
                postListEmitter.AppendLine($"        AllPosts[{index++}],");
            }
            postListEmitter.Append("    ];");
        }

        var allPostsByMonthEmitter = new StringBuilder();
        allPostsByMonthEmitter.AppendLine("    public static readonly ImmutableArray<ImmutableArray<Post>> AllPostsByMonth = [");
        foreach (var key in posts.Keys.OrderByDescending(k => k))
        {
            allPostsByMonthEmitter.AppendLine($"        _{key},");
        }
        allPostsByMonthEmitter.Append("    ];");

        // Get the latest 3 years
        var lastedPostEmitter = new StringBuilder();
        switch (postCount)
        {
            case 0:
                lastedPostEmitter.AppendLine($"    public static readonly ImmutableArray<Post> LatestPosts = ImmutableArray<Post>.Empty;");
                break;
            case 1:
                lastedPostEmitter.AppendLine($"    public static readonly ImmutableArray<Post> LatestPosts = [AllPosts[0] ];");
                break;
            case 2:
                lastedPostEmitter.AppendLine($"    public static readonly ImmutableArray<Post> LatestPosts = [AllPosts[0], AllPosts[1] ];");
                break;
            case 3:
                lastedPostEmitter.AppendLine($"    public static readonly ImmutableArray<Post> LatestPosts = [AllPosts[0], AllPosts[1], AllPosts[2] ];");
                break;
            default:
                lastedPostEmitter.AppendLine($"    public static readonly ImmutableArray<Post> LatestPosts = [AllPosts[0], AllPosts[1], AllPosts[2] ];");
                break;
        }

        var code = $$"""
// <auto-generated> This .cs file is generated by Blog.Generator. </auto-generated>
#nullable enable
#pragma warning disable CS0219 // The variable 'variable' is assigned but its value is never used
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8603 // Possible null reference return.
#pragma warning disable CS8604 // Possible null reference argument for parameter.
#pragma warning disable CS8619 // Possible null reference assignment fix

using System.Collections.Immutable;
using System.Runtime.InteropServices;

namespace Blog;

public static class PostProvider
{
{{allPostsEmitter}}
{{postListEmitter}}
{{allPostsByMonthEmitter}}
{{lastedPostEmitter}}
}

[StructLayout(LayoutKind.Auto)]
public record struct Post
{
    public required string? Url { get; init; }

    public required string? Date { get; init; }

    public required string? Title { get; init; }

    public required string? HeadText { get; init; }

    public required ImmutableArray<string> Categories { get; init; }
}
""";

        context.AddSource($"PostProvider_generated.g.cs", code);
    }
}

public sealed record Post
{
    private static readonly MarkdownPipeline markdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseYamlFrontMatter()
        .Build();

    public string Path { get; init; }

    public SourceText? SourceText { get; init; }

    public string FileName => System.IO.Path.GetFileNameWithoutExtension(Path);

    public Header Header { get; init; }

    public string HeadText { get; init; }

    public Post(string path, SourceText? sourceText)
    {
        Path = path;
        SourceText = sourceText;

        var markdown = SourceText?.ToString() ?? string.Empty;
        var document = Markdown.Parse(markdown, markdownPipeline);
        var yamlBlock = document.Descendants<YamlFrontMatterBlock>().FirstOrDefault();
        var yaml = markdown.Substring(yamlBlock.Span.Start, yamlBlock.Span.Length);

        Header = YamlSerializer.Deserialize<Header>(Encoding.UTF8.GetBytes(yaml));

        // Extract the first 100 characters of the text content from the markdown document.
        var headTextEmiiter = new StringBuilder();
        foreach (var block in document)
        {
            if (block is ParagraphBlock paragraphBlock && paragraphBlock.Inline != null)
            {
                foreach(var inline in paragraphBlock.Inline.Where(i => i is LiteralInline))
                {
                    headTextEmiiter.Append(inline.ToString());
                }
            }
        }
        HeadText = headTextEmiiter.Length > 100 ? $"{headTextEmiiter.ToString().Substring(0, 100)}..." : headTextEmiiter.ToString();
    }
}

[YamlObject]
public partial record Header
{
    public string? Title { get; init; }

    public string? Url { get; init; }

    public string? Namespace { get; init; }

    public string? Categories { get; init; }

    [YamlIgnore]
    public string? RefUrl
    {
        get
        {
            if (Url?.IndexOf("/") >= 0)
            {
                return Url.Substring(1, Url.Length - 1);
            }
            return Url;
        }
    }

    public string? FormatCategoriesInArrayType()
    {
        if (string.IsNullOrEmpty(Categories))
        {
            return "ImmutableArray<string>.Empty";
        }
        return $"[{string.Join(",", Categories!.Split(',').Select(c => $"\"{c.Trim()}\""))} ]";
    }
}
